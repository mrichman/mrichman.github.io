<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby on Mark Richman</title>
    <link>https://markrichman.com/tags/ruby/</link>
    <description>Recent content in Ruby on Mark Richman</description>
    <generator>Hugo -- gohugo.io</generator>
    <managingEditor>mark@markrichman.com (Mark Richman)</managingEditor>
    <webMaster>mark@markrichman.com (Mark Richman)</webMaster>
    <copyright>&amp;copy; 2017. Mark Richman Consulting, Inc. All rights reserved.</copyright>
    <lastBuildDate>Mon, 22 Nov 2010 16:03:24 +0000</lastBuildDate>
    
	<atom:link href="https://markrichman.com/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rails Custom Authentication using Devise, DataMapper, and a Legacy Database</title>
      <link>https://markrichman.com/rails-devise-datamapper-authentication/</link>
      <pubDate>Mon, 22 Nov 2010 16:03:24 +0000</pubDate>
      <author>mark@markrichman.com (Mark Richman)</author>
      <guid>https://markrichman.com/rails-devise-datamapper-authentication/</guid>
      <description>ActiveRecord is great if your database schema evolves along with your web app from birth, but not all of us have this luxury. Many of us live in the world of corporate IT – a world of legacy databases and bureaucracies that make getting a Rails app into production hard enough, let alone getting a new schema into production. DataMapper is a common alternative ORM to use for these scenarios. DataMapper is ideally suited for legacy databases, as Martin Gamsjaeger describes:</description>
    </item>
    
    <item>
      <title>Rails 2.3 Application Template template.rb</title>
      <link>https://markrichman.com/rails-23-application-template-templaterb/</link>
      <pubDate>Fri, 20 Mar 2009 14:18:59 +0000</pubDate>
      <author>mark@markrichman.com (Mark Richman)</author>
      <guid>https://markrichman.com/rails-23-application-template-templaterb/</guid>
      <description>Here&amp;#8217;s my current Rails 2.3 application template which uses the following features:
 asset_packager exception_notifier paperclip restful-authentication (generates user and session) role-requirement (generates roles for user) rspec cucumber active_merchant sqlite3-ruby will_paginate haml nifty_layout Capistrano capify database session store  `Here&amp;#8217;s my current Rails 2.3 application template which uses the following features:
 asset_packager exception_notifier paperclip restful-authentication (generates user and session) role-requirement (generates roles for user) rspec cucumber active_merchant sqlite3-ruby will_paginate haml nifty_layout Capistrano capify database session store  `</description>
    </item>
    
    <item>
      <title>Deploying Rails Apps with Capistrano, Git, and Passenger</title>
      <link>https://markrichman.com/deploying-rails-apps-with-capistrano-git-and-passenger/</link>
      <pubDate>Thu, 21 Aug 2008 00:15:51 +0000</pubDate>
      <author>mark@markrichman.com (Mark Richman)</author>
      <guid>https://markrichman.com/deploying-rails-apps-with-capistrano-git-and-passenger/</guid>
      <description>I host my sites on an Ubuntu VPS. I use a combination of Rails, Apache2, Phusion Passenger, Git, and MySQL. I have a pretty useful Capistrano deploy.rb if you have a similar configuration. I&amp;#8217;d love some feedback, as I promised to assist Jamis Buck in his Capistrano documentation efforts.</description>
    </item>
    
    <item>
      <title>Ruby on Rails: Adding XSL Processing Instruction with to_xml</title>
      <link>https://markrichman.com/ruby-on-rails-adding-xsl-processing-instruction-with-to_xml/</link>
      <pubDate>Sat, 09 Aug 2008 18:35:14 +0000</pubDate>
      <author>mark@markrichman.com (Mark Richman)</author>
      <guid>https://markrichman.com/ruby-on-rails-adding-xsl-processing-instruction-with-to_xml/</guid>
      <description>Style Sheets can be associated with an XML document by using a processing instruction whose target is xml-stylesheet. It looks something like this:
&amp;lt;?xml version=&#34;1.0&#34; encoding=&#34;ISO-8859-1&#34;?&amp;gt; &amp;lt;?xml-stylesheet type=&#34;text/xsl&#34; href=&#34;something.xsl&#34;?&amp;gt; How do we get to_xml to render the XSL processing instruction? Put this in your controller:</description>
    </item>
    
    <item>
      <title>RailsConf Git Talk</title>
      <link>https://markrichman.com/railsconf-git-talk/</link>
      <pubDate>Sat, 14 Jun 2008 20:44:24 +0000</pubDate>
      <author>mark@markrichman.com (Mark Richman)</author>
      <guid>https://markrichman.com/railsconf-git-talk/</guid>
      <description>Scott Chacon&amp;#8217;s RailsConf 2008 Talk on Git:</description>
    </item>
    
    <item>
      <title>RailsConf 2008 David Heinemeier Hansson’s Keynote Video</title>
      <link>https://markrichman.com/railsconf-2008-david-heinemeier-hanssons-keynote-video/</link>
      <pubDate>Sat, 14 Jun 2008 20:20:52 +0000</pubDate>
      <author>mark@markrichman.com (Mark Richman)</author>
      <guid>https://markrichman.com/railsconf-2008-david-heinemeier-hanssons-keynote-video/</guid>
      <description>RailsConf 2008 David Heinemeier Hansson&amp;#8217;s Keynote Video
RailsConf 2008 David Heinemeier Hansson Keynote from daniel wanja on Vimeo.</description>
    </item>
    
  </channel>
</rss>